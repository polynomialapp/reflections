What happens when you initialize a repository? Why do you need to do it?
When you initialize a repo, a .git file is created in the container folder.
That file tracks all the changes—the version history.
You need to do it in order to use git—git doesn't track a repo unless you tell it to.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is just a holding tank for regulating what commits go into the repo at a given time.
It doesn't contain the current, working code or any of the previous versions and has no use outside of making commits.
Since it allows you to pick out individual files, you can make your commits discrete.

How can you use the staging area to make sure you have one commit per logical change?
Add only the file or files that relate to a given logical change. To verify, use git diff and git diff --staged to compare the working directory with the staging area and the staging area with the last commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When adding new experimental features, attempting to add a new language version, generally mucking about with the code in ways that you don't necessarily want to include in the main version. Branches let you follow those alternative paths whie still preserving the main, proper version.
You can even work on the main and experimental branches at the same time.

How do the diagrams help you visualize the branch structure?
Diagrams turn the metaphorical branches into actual branches, so the structure and relations are obvious.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
All the commits from both branches are combined (really, all the commits from one are merged into the other, ordered by timestamp). All the commits from both branches are then reachable from a single branch and it is possible to see the current version of the program with all of the new additions from each branch.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros: faster
Cons: Conflicts may arise and will require changes and debugging
